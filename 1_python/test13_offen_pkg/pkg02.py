import re

"""
| 函数              | 说明                    | 常见用途        |
| --------------- | --------------------- | ----------- |
| `re.match()`    | 从字符串开头匹配              | 验证是否以特定模式开头 |
| `re.search()`   | 搜索整个字符串，返回第一个匹配       | 查找任意位置的匹配   |
| `re.findall()`  | 返回所有匹配的**列表**         | 提取所有符合条件的子串 |
| `re.finditer()` | 返回一个**迭代器**，每个元素是匹配对象 | 按需遍历所有匹配    |
| `re.sub()`      | 替换匹配内容                | 文本替换        |
| `re.split()`    | 按正则切割字符串              | 按多个分隔符切割文本  |
| `re.compile()`  | 编译正则表达式，提高多次匹配效率      | 高级使用        |

常用元字符（匹配规则
| 符号              | 含义                | 示例           | 匹配                        |      |                 |
| --------------- | ----------------- | ------------ | ------------------------- | ---- | --------------- |
| `.`             | 任意字符（除换行）         | `a.c`        | `abc`, `axc`              |      |                 |
| `^`             | 字符串开头             | `^a`         | `'abc'` ✅ `'ba'` ❌        |      |                 |
| `$`             | 字符串结尾             | `b$`         | `'bob'` ✅ `'boat'` ❌      |      |                 |
| `*`             | 0 次或多次            | `a*`         | `''`, `'a'`, `'aaa'`      |      |                 |
| `+`             | 1 次或多次            | `a+`         | `'a'`, `'aa'`             |      |                 |
| `?`             | 0 次或 1 次          | `a?`         | `''`, `'a'`               |      |                 |
| `{n}`           | 恰好 n 次            | `a{3}`       | `'aaa'`                   |      |                 |
| `{n,}`          | 至少 n 次            | `a{2,}`      | `'aa'`, `'aaaa'`          |      |                 |
| `{n,m}`         | n 到 m 次           | `a{2,4}`     | `'aa'`, `'aaa'`, `'aaaa'` |      |                 |
| `[]`            | 字符集合              | `[abc]`      | `'a'`, `'b'`, `'c'`       |      |                 |
| `[^abc]`        | 非 abc             | `'d'`, `'x'` |                           |      |                 |
| `\d`            | 数字 [0-9]          | `\d{3}`      | `'123'`                   |      |                 |
| `\D`            | 非数字               |              |                           |      |                 |
| `\w`            | 单词字符 [a-zA-Z0-9_] |              |                           |      |                 |
| `\W`            | 非单词字符             |              |                           |      |                 |
| `\s`            | 空白字符（空格、换行、制表）    |              |                           |      |                 |
| `\S`            | 非空白字符             |              |                           |      |                 |
| `               | `                 | 或            | `cat                      | dog` | `'cat'` `'dog'` |
| `()`            | 分组                | `(abc)+`     | `'abcabc'`                |      |                 |
| `(?P<name>...)` | 命名分组              | 提取时更方便       |                           |      |                 |


常用匹配示例
| 目标         | 正则                          | 示例匹配                         |
| ---------- | --------------------------- | ---------------------------- |
| 匹配手机号      | `^1[3-9]\d{9}$`             | `13812345678`                |
| 匹配邮箱       | `^[\w.-]+@[\w.-]+\.\w+$`    | `a.b@xx.com`                 |
| 匹配 IPv4    | `^(?:\d{1,3}\.){3}\d{1,3}$` | `192.168.1.1`                |
| 匹配中文       | `[\u4e00-\u9fa5]+`          | `'你好'`                       |
| 匹配 HTML 标签 | `<[^>]+>`                   | `<div>`, `<img src="a.jpg">` |

"""


def test1():
    m = re.match(r'\d+', '123abc')
    print(m.group())  # 123
    print(m.span())  # (0, 3)

    m2 = re.match(r'\d+', 'abc123')
    print(m2)  # None

    m3 = re.match(r'\d+', '1abc123')
    print(m3.group())  # 1
    print(m3.span())  # (0, 1)

    m5 = re.search(r'\d+', 'abc123xyz')
    print(m5.group())
    print(m5.span())

    res = re.findall(r'\d+', 'a1b22c333')
    print(res)  # ['1', '22', '333']

    iter = re.finditer(r'\d+', "a1b22c333")
    for item in iter:
        print(item.group(), item.span(), item)

    # 所有数字都替换为 -
    s = re.sub(r'\d+', '-', 'a1b22c333')
    print(s)
    s = re.sub(r'\d+', lambda x: str(int(x.group()) * 3), 'a1b22c333')
    print(s)

    # 分割字符串
    ss = re.split(r'\d+', 'a1b22c333d')
    print(ss)

    # 使用预编译，实现多次使用
    pattern = re.compile(r'\d+')
    print(pattern)
    sr = pattern.search('a1b2c3d')
    print(sr)
    print(sr.group())
    print(sr.span())

    print('-------')
    # # 倒数第二位是1，倒数第一位是3-9的数字
    arr = ['113', '121', '122', '1513', '1315']
    for i in range(len(arr)):
        print(arr[i], bool(re.search(r'1[3-9]$', arr[i])))

    pattern = re.compile(r'1[3-9]$')

    tests = [
        "a911",  # ✅ 最后两位 91 → 符合
        "xx412",  # ✅ 最后两位 41 → 符合
        "test213",  # ✅ 最后两位 71 → 符合
        "a13a5",  # ❌ 不是结尾
        "1316",  # ✅ 最后两位 31 → 符合
        "1217",  # ❌ 最后一位是1，不在3–9之间
    ]

    for t in tests:
        print(f"{t:8} → {bool(pattern.search(t))}")

    pass


if __name__ == '__main__':
    # re -- 正则表达式

    test1()

    print("Hello World")
